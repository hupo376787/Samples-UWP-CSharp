using Stimulsoft.Report;
using Stimulsoft.Report.Chart;
using Stimulsoft.Report.Components;
using System;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;

namespace RealtimePreview
{
    public sealed partial class MainPage : Page
    {
        public MainPage()
        {
            this.InitializeComponent();
            StiOptions.Viewer.Elements.ReportOpenButtonVisibility = Visibility.Collapsed;

            #region Init
            timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromMilliseconds(70);
            timer.Tick += timer_Tick;
            #endregion

            this.Loaded += BlankPage_Loaded;
        }

        #region Fields
        private const string reportStr = "";
        private Stimulsoft.Report.StiReport stiReport1;

        private StiChart chart = null;
        private DispatcherTimer timer;
        private float angle = 0;
        #endregion

        #region Handlers
        async private void BlankPage_Loaded(object sender, RoutedEventArgs e)
        {
            byte[] buffer = Convert.FromBase64String(reportStr);
            stiReport1 = new StiReport();
            await stiReport1.LoadAsync(buffer);
            await stiReport1.RenderAsync();

            StiComponentsCollection comps = stiReport1.RenderedPages[0].GetComponents();
            chart = comps["Chart1"] as StiChart;

            viewerCotnrol.Report = stiReport1;
            timer.Start();
        }

        private void timer_Tick(object sender, object e)
        {
            //Rotate text
            angle -= 1f;
            if (angle < 0) angle = 359;

            //Rotate series 1
            angle = ((StiDoughnutSeries)chart.Series[0]).StartAngle;
            angle -= 1f;
            if (angle < 0) angle = 359;
            ((StiDoughnutSeries)chart.Series[0]).StartAngle = angle;

            //Rotate series 2
            angle = ((StiDoughnutSeries)chart.Series[1]).StartAngle;
            angle += 1f;
            if (angle > 359) angle = 0;
            ((StiDoughnutSeries)chart.Series[1]).StartAngle = angle;

            viewerCotnrol.UpdateCurrentVisualPageContent();
        }
        #endregion
    }
}
